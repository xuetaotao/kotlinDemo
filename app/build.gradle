apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply from: 'tinker-support.gradle'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.jlpay.kotlindemo"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        multiDexEnabled true//开启多 Dex打包

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //第二步：集成SDK 设置支持的SO库架构
        ndk {
            abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
        //填充manifest文件中的变量参数
        manifestPlaceholders = [
                AMAP_API_KEY       : "f77e3c2ac742f9b003ef1ac533748e65",
                BAIDU_MAP_API_KEY  : "Ca3ngPa1TMn5S7ElnTcfN81rS0sISo4q",
                TENCENT_MAP_API_KEY: "UFYBZ-ZUX6J-TWSFH-KMAIY-R7VBE-ANF5F"
        ]
    }

    signingConfigs {
        release {
            storeFile file('kotlinDemoKey.jks')
            storePassword 'kotlinDemo'
            keyAlias 'mySignKey'
            keyPassword 'kotlinDemo'
        }
    }

    buildTypes {
        debug {
            minifyEnabled false//true：开混淆
            shrinkResources false//true：移除无用文件
            signingConfig signingConfigs.release
        }
        release {
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    //两层维度
    flavorDimensions 'environment'
    productFlavors {
        dev {
            buildConfigField("String", "ENVIRONMENT", "\"0\"")
        }
        pre {
            buildConfigField("String", "ENVIRONMENT", "\"1\"")
        }
        pro {
            buildConfigField("String", "ENVIRONMENT", "\"2\"")
        }
    }

    //三维度
//    flavorDimensions 'paid', 'environment'
//    productFlavors {
//        free {
//            dimension 'paid'
//        }
//        paid {
//            dimension 'paid'
//        }
//        dev {
//            dimension 'environment'
//        }
//        pre {
//            dimension 'environment'
//        }
//        pro {
//            dimension 'environment'
//        }
//    }

    compileOptions {
        sourceCompatibility(JavaVersion.VERSION_1_8)
        targetCompatibility(JavaVersion.VERSION_1_8)
    }

    //配置被依赖的代码路径
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            jni.srcDirs = [] //ndk-build
//            java.srcDirs = ['src/main/java']//可以没有这项，但是不能为空
        }
    }
}

//依赖库强制使用某个版本和强制一分钟更新一次版本缓存
configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 1, 'minutes'
    }
}


dependencies {
    //implementation：不会传递依赖；complie/api：会传递依赖；api是compile的替代品，效果完全等同；当依赖被传递时，二级依赖的改动会导致0级项目重新编译；当依赖不传递时，二级依赖的改动不会导致0级项目重新编译
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.exifinterface:exifinterface:1.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    testImplementation 'junit:junit:4.12'//项目测试代码(src/test/java)的依赖
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'//定义(src/androidTest)目录下的代码依赖
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    //okhttp3
//    implementation 'com.squareup.okhttp3:okhttp:3.12.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.0'

    //RxJava2
    implementation 'io.reactivex.rxjava2:rxjava:2.2.19'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    //retrofit2
    implementation 'com.squareup.retrofit2:retrofit:2.6.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.6.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.0'

    //rxlifecycle2：https://github.com/trello/RxLifecycle
    implementation 'com.trello.rxlifecycle2:rxlifecycle:2.2.1'
    implementation 'com.trello.rxlifecycle2:rxlifecycle-android:2.2.1'
    implementation 'com.trello.rxlifecycle2:rxlifecycle-components:2.2.1'

    //AutoDispose：https://github.com/uber/AutoDispose
    implementation 'com.uber.autodispose:autodispose:1.3.0'
    implementation 'com.uber.autodispose:autodispose-android-archcomponents:1.3.0'

    //RxPermissions  https://github.com/tbruyelle/RxPermissions
    implementation 'com.github.tbruyelle:rxpermissions:0.10.2'

    //Gson
    implementation 'com.google.code.gson:gson:2.8.6'

    //greedao
    implementation 'org.greenrobot:greendao:3.2.2'
    implementation 'org.greenrobot:greendao-generator:3.2.2'

    //微信分享 https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419319167&token=&lang=
    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-with-mta:+'

    //图片压缩 https://github.com/Curzibn/Luban
    implementation 'top.zibin:Luban:1.1.8'

    //glide https://github.com/bumptech/glide
    implementation 'com.github.bumptech.glide:glide:3.7.0'

    //高德定位
    implementation 'com.amap.api:location:5.1.0'

    //腾讯定位
    implementation 'com.tencent.map.geolocation:TencentLocationSdk-openplatform:7.2.6'


    //测试库 Java版本
//    implementation 'com.jlpay.opensdk:location:1.0.3'
    implementation 'com.jlpay.opensdk:location:2.0.0-SNAPSHOT'//测试版本

    //测试库 Kotlin版本

    //其中latest.release指代最新Bugly SDK版本号，也可以指定明确的版本号，例如2.1.9
    //腾讯Bugly https://bugly.qq.com/docs/user-guide/instruction-manual-android/?v=20170912151050
//    implementation 'com.tencent.bugly:crashreport:3.3.6'//升级SDK已经集成crash上报功能
    //其中latest.release指代最新Bugly NDK版本号，也可以指定明确的版本号，例如3.0
//    implementation 'com.tencent.bugly:nativecrashreport:3.7.800'

    //第二步：集成SDK tinker热更新，添加tinker的库依赖
    implementation('com.android.support:multidex:1.0.3')// 多dex配置
    implementation('com.tencent.tinker:tinker-android-lib:1.9.14.3')
    //tinker的核心库， 指定tinker依赖版本（注：应用升级1.3.5版本起，不再内置tinker）
    implementation('com.tencent.bugly:crashreport_upgrade:1.5.0')//升级SDK已经集成crash上报功能
    implementation('com.tencent.bugly:nativecrashreport:3.9.1')
    api("com.tencent.tinker:tinker-android-anno-support:1.9.14.7")

    //自己写的：利用反射实现 BindView的库
//    implementation(project(':lib-reflection'))
    implementation(project(':lib-mybinding'))
//    annotationProcessor(project('lib-processor'))

    //扫码第三方库，个人维护，不建议使用，这里仅做测试
    implementation('com.github.amggg:YXing:V1.0.6')

    /***************************************这部分放暂时没用到但是可以用的第三方库*************************************************************************************/

    //实用工具类的库：Android封装最全面的工具类(加密、文件、网络、bitmap、正则、屏幕、时间等等) https://github.com/Blankj/AndroidUtilCode
    implementation 'com.blankj:utilcode:1.26.0'

    //依赖注入框架 Dragger
    implementation 'com.google.dagger:dagger-android:2.35.1'

    //butterknife
    implementation 'com.jakewharton:butterknife:10.1.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'

    //内存泄露检测工具 LeakCanary
    implementation 'com.squareup.leakcanary:leakcanary-android:2.2'

    /****************************************************************************************************************************/


    /**************************************这部分放只是想查看源码的第三方库**************************************************************************************/
    //供查看源码使用
//    compileOnly('com.android.tools.build:gradle:4.0.0')//compileOnly：只参与编译不会参与打包，编译有点问题，先注释掉
}


//Tinker针对高版本gradle执行复制R文件的操作
task tinkerCopyFile(type: Copy) {
    group = "customerTask"
    def appBuildDir = "${buildDir}"
    fileTree("${appBuildDir}/bakApk") {
        include("**/*pro-release.apk")
    }.each { file ->
        println(file.name + "\n" + file.path)
        rename(file.name, 'kotlinDemo-pro-release.apk')
        from(file.path)
    }
    from("${appBuildDir}/intermediates/runtime_symbol_list/proRelease") {
        rename("(.*)R.txt", "app-pro-release-R.txt")
    }
    into("${appBuildDir}/bakApk/app-0113-16-12-10/pro")
}

task tinkerCopy(dependsOn: "assembleRelease") {
    group = "customerTask"
    doLast {
        def appBuildDir = "${buildDir}"
        fileTree("${appBuildDir}/bakApk") {
            include("**/*_release_pro.apk")
        }.each { file ->
            copy {
                from("${appBuildDir}/intermediates/runtime_symbol_list/proRelease") {
                    rename("(.*)R.txt", "app-pro-release-R.txt")
                }
                into(file.parent)
            }
        }
    }
}

task tinerRTxtCopyAdvanced(dependsOn: "assembleRelease") {
    group("customerTask")
    android.applicationVariants.all { variant ->
        println("variant:${variant.name}")//lishuaPreRelease
        println("variant2:${variant.dirName}")//lishuaPre/release
        println("variant3:${variant.flavorName}")//lishuaPre
        println("variant4:${project.name}")//app
        println("variant5:${buildDir}")//Users/jlpay/op-app-android/app/build
        println("variant6:${variant.buildType.name}")//release
        println("variant7:${variant.baseName}")//lishua-pre-release
        println("variant8:${variant.name.capitalize()}")//LishuaPreRelease
        println("variant9:${it.name}")//tinerRTxtCopy
        doLast {
            def bakPath = "${buildDir}/bakApk/"
            def dirName = variant.name
            def destDirFileName = "${variant.buildType.name}_${variant.productFlavors[0].name}_${variant.productFlavors[1].name}.apk"
            def fileNamePrefix = "${project.name}-${variant.baseName}"

            copy {
                fileTree(bakPath) {
                    include("**/*${destDirFileName}")
                }.each { file ->
                    from "${buildDir}/intermediates/symbols/${dirName}/R.txt"
                    from "${buildDir}/intermediates/symbol_list/${dirName}/R.txt"
                    from "${buildDir}/intermediates/runtime_symbol_list/${dirName}/R.txt"
                    into file.parent
                    rename { String fileName ->
                        fileName.replace("R.txt", "${fileNamePrefix}-R.txt")
                    }
                    println("destPath2:${file.parent}")
                }
            }
        }
    }
}

task tinerRTxtCopyUnfinished(dependsOn: "assembleRelease") {
    group("customerTask")
    android.applicationVariants.all { variant ->
        println("variant:${variant.name}")//lishuaPreRelease
        println("variant2:${variant.dirName}")//lishuaPre/release
        println("variant3:${variant.flavorName}")//lishuaPre
        println("variant4:${project.name}")//app
        println("variant5:${buildDir}")//Users/jlpay/op-app-android/app/build
        println("variant6:${variant.buildType.name}")//release
        println("variant7:${variant.baseName}")//lishua-pre-release
        println("variant8:${variant.name.capitalize()}")//LishuaPreRelease
        println("variant9:${it.name}")//tinerRTxtCopy
        doLast {
            def bakPath = "${buildDir}/bakApk/"
            def date = new Date().format("MMdd")
            def dirName = variant.name
            def destPath = "${bakPath}/${date}/${variant.flavorName}"//TODO 这里有问题，有时间了考虑用正则表达式匹配一下
            def fileNamePrefix = "${project.name}-${variant.baseName}"

            copy {
                from "${buildDir}/intermediates/symbols/${dirName}/R.txt"
                from "${buildDir}/intermediates/symbol_list/${dirName}/R.txt"
                from "${buildDir}/intermediates/runtime_symbol_list/${dirName}/R.txt"
                into destPath
                rename { String fileName ->
                    fileName.replace("R.txt", "${fileNamePrefix}-R.txt")
                }
                println("destPath:${destPath}")
            }

            fileTree(bakPath) {
                include("**/*${variant.buildType.name}_${variant.productFlavors[0].name}_${variant.productFlavors[1].name}.apk")
            }.each { file ->
                println("bakPath:file:name:${file.name}")
            }
        }
    }
}